apiVersion: 1.0.0
metadata:
  name: postit-app-8467y
projects:
  - name: quarkus-reactjs-postit-app
    source:
      location: 'https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app.git'
      type: github
      branch: master
components:
  - memoryLimit: 512Mi
    type: dockerimage
    alias: mongo
    image: centos/mongodb-34-centos7
    env:
      - value: user
        name: MONGODB_USER
      - value: password
        name: MONGODB_PASSWORD
      - value: sampledb
        name: MONGODB_DATABASE
      - value: password
        name: MONGODB_ADMIN_PASSWORD
  - mountSources: true
    endpoints:
      - name: quarkus-prod
        port: 8080
    command:
      - tail
    args:
      - '-f'
      - /dev/null
    memoryLimit: 32M
    type: dockerimage
    alias: quarkus-backend-native-prod
    image: registry.access.redhat.com/ubi8/ubi-minimal
    env:
      - value: user
        name: username
      - value: password
        name: password
      - value: password
        name: admin_password
      - value: 'mongodb://localhost'
        name: uri
  - mountSources: true
    endpoints:
      - name: node-dev
        port: 3000
    memoryLimit: 768Mi
    type: dockerimage
    alias: node-frontend-dev
    image: 'quay.io/eclipse/che-nodejs12-community:nightly'
    env:
      - value: '3000'
        name: FRONTEND_PORT
  - mountSources: true
    endpoints:
      - name: quarkus-dev
        port: 8080
    command:
      - sleep
    args:
      - infinity
    memoryLimit: 4Gi
    type: dockerimage
    volumes:
      - name: m2
        containerPath: /.m2
    alias: quarkus-backend-dev
    image: 'quay.io/quarkus/centos-quarkus-maven:20.1.0-java11'
    env:
      - value: '-Dmaven.repo.local=/.m2/repository'
        name: MAVEN_OPTS
      - value: user
        name: username
      - value: password
        name: password
      - value: password
        name: admin_password
      - value: 'mongodb://localhost'
        name: uri
  - mountSources: true
    memoryLimit: 64M
    type: dockerimage
    volumes:
      - name: m2
        containerPath: /work/volumes/.m2
    alias: data
    image: quay.io/sunix/postit-app-dev-data
  - id: redhat/quarkus-java11/latest
    type: chePlugin
    memoryLimit: 4Gi
  - type: chePlugin
    reference: 'https://github.com/eclipse/che-plugin-registry/raw/7.21.2/v3/plugins/redhat/vscode-openshift-connector/0.1.2/meta.yaml'
    alias: vscode-openshift
  - id: che-incubator/typescript/latest
    type: chePlugin
  - id: ms-vscode/vscode-github-pullrequest/latest
    type: chePlugin
  - id: redhat/vscode-didact/latest
    preferences:
      didact.openDefaultTutorialAtStartup: true
      che.welcome.enable: false
      didact.defaultUrl: /projects/quarkus-reactjs-postit-app/.che-didact-guide.md
    type: chePlugin
    registryUrl: 'https://che-plugin-registry-main.surge.sh/v3'
    alias: didact-plugin
commands:
  - name: start DEVMODE quarkus-backend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/quarkus-backend
        type: exec
        command: 'pkill java; mvn compile quarkus:dev'
        component: quarkus-backend-dev
  - name: build NATIVE quarkus-backend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/quarkus-backend
        type: exec
        command: pkill java; mvn package -Dnative -Dmaven.test.skip -Dquarkus.native.native-image-xmx=2G
        component: quarkus-backend-dev
  - name: start NATIVE quarkus-backend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/quarkus-backend/target
        type: exec
        command: ./quarkus-backend-1.0.0-SNAPSHOT-runner -Dquarkus.http.host=0.0.0.0
        component: quarkus-backend-native-prod
  - name: connect java debugger quarkus-backend
    actions:
      - referenceContent: |
          {
          "version": "0.2.0",
          "configurations": [
            {
              "type": "java",
              "name": "Debug (Attach) - Remote",
              "request": "attach",
              "hostName": "localhost",
              "port": 5005
            }]
          }
        type: vscode-launch
  - name: start DEVMODE node-frontend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/node-frontend/
        type: exec
        command: npm run devmode
        component: node-frontend-dev
  - name: start PROD node-frontend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/node-frontend/
        type: exec
        command: npm start
        component: node-frontend-dev
  - name: oc - deploy app (quarkus NATIVE) from github
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/node-frontend/
        type: exec
        command: |-
          # mongodb
          oc new-app -e MONGODB_USER=user -e MONGODB_PASSWORD=password -e MONGODB_DATABASE=sampledb -e MONGODB_ADMIN_PASSWORD=password centos/mongodb-36-centos7 --name=mongo
          # s2i quarkus app from source
          oc new-app quay.io/quarkus/ubi-quarkus-native-s2i:20.0.0-java8~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --name=quarkus-backend --context-dir=quarkus-backend -e uri=mongodb://mongo -e username=user -e password=password
          # s2i node frontend from source
          oc new-app nodejs~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --context-dir=node-frontend --name=node-frontend -e PORT=8080 -e COMPONENT_QUARKUS_BACKEND_HOST=quarkus-backend
          oc expose svc/node-frontend
          # quarkus native build need more cpu and memory
          # wait for quakus-backend build to start and cancel it to reconfigure it
          for i in 1 2 3 4 5 6 7 8 9; do
            pods="$(oc get build -o go-template='{{range .items}}{{$bc := index .metadata.annotations "openshift.io/build-config.name"}}{{$status := index .status.phase}}{{if eq $bc "quarkus-backend"}}{{if eq $status "Running"}}{{.metadata.name}}{{"\t"}}{{.status.phase}}{{"\n"}}{{end}}{{end}}{{end}}')";
            echo $pods;
            if [ -n "$pods" ]; then
              break;
            fi
            echo "Waiting for quarkus-backend build to be ready...";
            sleep "2";
          done
          oc cancel-build bc/quarkus-backend
          oc patch bc/quarkus-backend -p '{"spec":{"resources":{"limits":{"cpu":"6", "memory":"6Gi"}}}}'
          oc start-build quarkus-backend
          oc expose svc/quarkus-backend
          # labels
          oc label deployment mongo app.openshift.io/runtime=mongodb
          oc label deployment node-frontend app.openshift.io/runtime=nodejs
          oc label deployment quarkus-backend app.openshift.io/runtime=quarkus
          # logs
          oc logs -f bc/quarkus-backend
          oc logs -f bc/node-frontend
          echo node-frontend url http://$(oc get route node-frontend --template='{{ .spec.host }}')
        component: vscode-openshift
  - name: oc - deploy app (quarkus JVM) from github
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/node-frontend/
        type: exec
        command: |-
          # mongodb
          oc new-app -e MONGODB_USER=user -e MONGODB_PASSWORD=password -e MONGODB_DATABASE=sampledb -e MONGODB_ADMIN_PASSWORD=password centos/mongodb-36-centos7 --name=mongo
          # s2i quarkus app from source
          oc new-app java~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --name=quarkus-backend --context-dir=quarkus-backend -e uri=mongodb://mongo -e username=user -e password=password --env=JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0"
          oc expose svc/quarkus-backend
          # s2i node frontend from source
          oc new-app nodejs~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --context-dir=node-frontend --name=node-frontend -e PORT=8080 -e COMPONENT_QUARKUS_BACKEND_HOST=quarkus-backend
          oc expose svc/node-frontend
          # labels
          oc label deployment mongo app.openshift.io/runtime=mongodb
          oc label deployment node-frontend app.openshift.io/runtime=nodejs
          oc label deployment quarkus-backend app.openshift.io/runtime=quarkus
          # logs
          oc logs -f bc/quarkus-backend
          oc logs -f bc/node-frontend
          echo node-frontend url http://$(oc get route node-frontend --template='{{ .spec.host }}')
        component: vscode-openshift
  - name: oc - redeploy quarkus-backend (from local sources)
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/
        type: exec
        command: |-
          oc start-build quarkus-backend --from-dir=.
          oc logs -f bc/quarkus-backend
        component: vscode-openshift
  - name: oc - redeploy node-frontend (from local sources)
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/
        type: exec
        command: |-
          oc start-build node-frontend --from-dir=.
          oc logs -f bc/node-frontend
        component: vscode-openshift
  - name: oc - scale node-frontend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/
        type: exec
        command: |-
          echo "Scale node-frontend. Enter the number of desired replicas:";
          read replicas;
          oc scale dc/node-frontend --replicas=${replicas}
        component: vscode-openshift
  - name: oc - scale quarkus-backend
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/
        type: exec
        command: |-
          echo "Scale quarkus-frontend. Enter the number of desired replicas:";
          read replicas;
          oc scale dc/quarkus-backend --replicas=${replicas}
        component: vscode-openshift
  - name: oc - get node-frontend URL
    actions:
      - workdir: /projects/quarkus-reactjs-postit-app/node-frontend/
        type: exec
        command: 'echo node-frontend url http://$(oc get route node-frontend --template=''{{ .spec.host }}'')'
        component: vscode-openshift
  - name: oc login
    actions:
      - workdir: /tmp
        type: exec
        command: 'rm oc; curl https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -s | tar zxv && ./oc login --server=${KUBERNETES_SERVICE_HOST}:443'
        component: vscode-openshift
  - name: show posts
    actions:
      - workdir: /tmp
        type: exec
        command: 'mongo mongodb://user:password@localhost/sampledb --eval "printjson(db.getCollection(''Posts'').find().toArray())"'
        component: mongo
